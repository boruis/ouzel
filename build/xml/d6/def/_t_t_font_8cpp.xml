<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="d6/def/_t_t_font_8cpp" kind="file" language="C++">
    <compoundname>TTFont.cpp</compoundname>
    <includes local="no">cassert</includes>
    <includes refid="db/d7c/_t_t_font_8hpp" local="yes">TTFont.hpp</includes>
    <includes refid="db/db9/_engine_8hpp" local="yes">core/Engine.hpp</includes>
    <includes refid="d7/da4/_file_system_8hpp" local="yes">files/FileSystem.hpp</includes>
    <includes refid="d8/dce/_log_8hpp" local="yes">utils/Log.hpp</includes>
    <includes refid="d7/d6d/_utils_8hpp" local="yes">utils/Utils.hpp</includes>
    <includes local="yes">../../external/stb/stb_truetype.h</includes>
    <incdepgraph>
      <node id="9468">
        <label>atomic</label>
      </node>
      <node id="9466">
        <label>functional</label>
      </node>
      <node id="9475">
        <label>queue</label>
      </node>
      <node id="9482">
        <label>limits</label>
      </node>
      <node id="9489">
        <label>events/EventDispatcher.hpp</label>
        <link refid="d1/d90/_event_dispatcher_8hpp_source"/>
        <childnode refid="9452" relation="include">
        </childnode>
        <childnode refid="9476" relation="include">
        </childnode>
        <childnode refid="9475" relation="include">
        </childnode>
        <childnode refid="9465" relation="include">
        </childnode>
        <childnode refid="9447" relation="include">
        </childnode>
        <childnode refid="9453" relation="include">
        </childnode>
        <childnode refid="9490" relation="include">
        </childnode>
        <childnode refid="9499" relation="include">
        </childnode>
      </node>
      <node id="9462">
        <label>graphics/DataType.hpp</label>
        <link refid="de/ddb/_data_type_8hpp_source"/>
        <childnode refid="9447" relation="include">
        </childnode>
      </node>
      <node id="9508">
        <label>scene/ParticleDefinition.hpp</label>
        <link refid="df/d2e/_particle_definition_8hpp_source"/>
        <childnode refid="9448" relation="include">
        </childnode>
        <childnode refid="9459" relation="include">
        </childnode>
      </node>
      <node id="9447">
        <label>cstdint</label>
      </node>
      <node id="9521">
        <label>../../external/stb/stb_truetype.h</label>
      </node>
      <node id="9487">
        <label>math/Quaternion.hpp</label>
        <link refid="d6/d42/_quaternion_8hpp_source"/>
        <childnode refid="9479" relation="include">
        </childnode>
        <childnode refid="9463" relation="include">
        </childnode>
      </node>
      <node id="9495">
        <label>scene/Component.hpp</label>
        <link refid="da/d5c/_component_8hpp_source"/>
        <childnode refid="9450" relation="include">
        </childnode>
        <childnode refid="9452" relation="include">
        </childnode>
        <childnode refid="9453" relation="include">
        </childnode>
        <childnode refid="9481" relation="include">
        </childnode>
        <childnode refid="9479" relation="include">
        </childnode>
        <childnode refid="9454" relation="include">
        </childnode>
        <childnode refid="9478" relation="include">
        </childnode>
        <childnode refid="9456" relation="include">
        </childnode>
      </node>
      <node id="9488">
        <label>files/FileSystem.hpp</label>
        <link refid="d7/da4/_file_system_8hpp_source"/>
        <childnode refid="9450" relation="include">
        </childnode>
        <childnode refid="9448" relation="include">
        </childnode>
        <childnode refid="9452" relation="include">
        </childnode>
        <childnode refid="9447" relation="include">
        </childnode>
        <childnode refid="9453" relation="include">
        </childnode>
      </node>
      <node id="9473">
        <label>core/Timer.hpp</label>
        <link refid="dd/d91/_timer_8hpp_source"/>
        <childnode refid="9453" relation="include">
        </childnode>
      </node>
      <node id="9503">
        <label>SpriteFrame.hpp</label>
        <link refid="dd/df2/_sprite_frame_8hpp_source"/>
        <childnode refid="9448" relation="include">
        </childnode>
        <childnode refid="9452" relation="include">
        </childnode>
        <childnode refid="9504" relation="include">
        </childnode>
        <childnode refid="9478" relation="include">
        </childnode>
        <childnode refid="9461" relation="include">
        </childnode>
        <childnode refid="9505" relation="include">
        </childnode>
        <childnode refid="9506" relation="include">
        </childnode>
        <childnode refid="9507" relation="include">
        </childnode>
        <childnode refid="9456" relation="include">
        </childnode>
      </node>
      <node id="9494">
        <label>audio/AudioDevice.hpp</label>
        <link refid="de/d74/_audio_device_8hpp_source"/>
        <childnode refid="9476" relation="include">
        </childnode>
        <childnode refid="9475" relation="include">
        </childnode>
        <childnode refid="9452" relation="include">
        </childnode>
        <childnode refid="9453" relation="include">
        </childnode>
        <childnode refid="9486" relation="include">
        </childnode>
      </node>
      <node id="9460">
        <label>cmath</label>
      </node>
      <node id="9513">
        <label>errno.h</label>
      </node>
      <node id="9444">
        <label>cassert</label>
      </node>
      <node id="9464">
        <label>core/Engine.hpp</label>
        <link refid="db/db9/_engine_8hpp_source"/>
        <childnode refid="9450" relation="include">
        </childnode>
        <childnode refid="9465" relation="include">
        </childnode>
        <childnode refid="9452" relation="include">
        </childnode>
        <childnode refid="9466" relation="include">
        </childnode>
        <childnode refid="9467" relation="include">
        </childnode>
        <childnode refid="9468" relation="include">
        </childnode>
        <childnode refid="9469" relation="include">
        </childnode>
        <childnode refid="9470" relation="include">
        </childnode>
        <childnode refid="9453" relation="include">
        </childnode>
        <childnode refid="9472" relation="include">
        </childnode>
        <childnode refid="9473" relation="include">
        </childnode>
        <childnode refid="9474" relation="include">
        </childnode>
        <childnode refid="9486" relation="include">
        </childnode>
        <childnode refid="9488" relation="include">
        </childnode>
        <childnode refid="9489" relation="include">
        </childnode>
        <childnode refid="9500" relation="include">
        </childnode>
        <childnode refid="9501" relation="include">
        </childnode>
        <childnode refid="9511" relation="include">
        </childnode>
        <childnode refid="9512" relation="include">
        </childnode>
        <childnode refid="9514" relation="include">
        </childnode>
      </node>
      <node id="9516">
        <label>math/Matrix3.hpp</label>
        <link refid="d8/d52/_matrix3_8hpp_source"/>
        <childnode refid="9459" relation="include">
        </childnode>
        <childnode refid="9463" relation="include">
        </childnode>
      </node>
      <node id="9511">
        <label>localization/Localization.hpp</label>
        <link refid="d0/dff/_localization_8hpp_source"/>
        <childnode refid="9450" relation="include">
        </childnode>
        <childnode refid="9449" relation="include">
        </childnode>
        <childnode refid="9448" relation="include">
        </childnode>
      </node>
      <node id="9502">
        <label>scene/SpriteDefinition.hpp</label>
        <link refid="dd/dbf/_sprite_definition_8hpp_source"/>
        <childnode refid="9452" relation="include">
        </childnode>
        <childnode refid="9503" relation="include">
        </childnode>
      </node>
      <node id="9448">
        <label>string</label>
      </node>
      <node id="9490">
        <label>events/Event.hpp</label>
        <link refid="d6/dc3/_event_8hpp_source"/>
        <childnode refid="9447" relation="include">
        </childnode>
        <childnode refid="9452" relation="include">
        </childnode>
        <childnode refid="9448" relation="include">
        </childnode>
        <childnode refid="9491" relation="include">
        </childnode>
        <childnode refid="9496" relation="include">
        </childnode>
        <childnode refid="9459" relation="include">
        </childnode>
        <childnode refid="9458" relation="include">
        </childnode>
        <childnode refid="9498" relation="include">
        </childnode>
      </node>
      <node id="9449">
        <label>map</label>
      </node>
      <node id="9492">
        <label>cfloat</label>
      </node>
      <node id="9443">
        <label>ouzel/gui/TTFont.cpp</label>
        <link refid="d6/def/_t_t_font_8cpp"/>
        <childnode refid="9444" relation="include">
        </childnode>
        <childnode refid="9445" relation="include">
        </childnode>
        <childnode refid="9464" relation="include">
        </childnode>
        <childnode refid="9488" relation="include">
        </childnode>
        <childnode refid="9515" relation="include">
        </childnode>
        <childnode refid="9517" relation="include">
        </childnode>
        <childnode refid="9521" relation="include">
        </childnode>
      </node>
      <node id="9481">
        <label>math/Box3.hpp</label>
        <link refid="de/d0f/_box3_8hpp_source"/>
        <childnode refid="9447" relation="include">
        </childnode>
        <childnode refid="9482" relation="include">
        </childnode>
        <childnode refid="9463" relation="include">
        </childnode>
        <childnode refid="9483" relation="include">
        </childnode>
      </node>
      <node id="9500">
        <label>scene/SceneManager.hpp</label>
        <link refid="db/d89/_scene_manager_8hpp_source"/>
        <childnode refid="9450" relation="include">
        </childnode>
        <childnode refid="9452" relation="include">
        </childnode>
        <childnode refid="9453" relation="include">
        </childnode>
      </node>
      <node id="9471">
        <label>Config.h</label>
      </node>
      <node id="9479">
        <label>math/Matrix4.hpp</label>
        <link refid="d4/d5c/_matrix4_8hpp_source"/>
        <childnode refid="9470" relation="include">
        </childnode>
        <childnode refid="9480" relation="include">
        </childnode>
        <childnode refid="9484" relation="include">
        </childnode>
        <childnode refid="9463" relation="include">
        </childnode>
        <childnode refid="9485" relation="include">
        </childnode>
      </node>
      <node id="9504">
        <label>math/Box2.hpp</label>
        <link refid="d8/d32/_box2_8hpp_source"/>
        <childnode refid="9447" relation="include">
        </childnode>
        <childnode refid="9482" relation="include">
        </childnode>
        <childnode refid="9459" relation="include">
        </childnode>
        <childnode refid="9458" relation="include">
        </childnode>
      </node>
      <node id="9493">
        <label>audio/SoundInput.hpp</label>
        <link refid="dd/d1a/_sound_input_8hpp_source"/>
        <childnode refid="9494" relation="include">
        </childnode>
      </node>
      <node id="9491">
        <label>audio/Sound.hpp</label>
        <link refid="d8/da4/_sound_8hpp_source"/>
        <childnode refid="9492" relation="include">
        </childnode>
        <childnode refid="9450" relation="include">
        </childnode>
        <childnode refid="9493" relation="include">
        </childnode>
        <childnode refid="9495" relation="include">
        </childnode>
        <childnode refid="9472" relation="include">
        </childnode>
        <childnode refid="9463" relation="include">
        </childnode>
      </node>
      <node id="9457">
        <label>graphics/PixelFormat.hpp</label>
        <link refid="d9/d2a/_pixel_format_8hpp_source"/>
      </node>
      <node id="9515">
        <label>utils/Log.hpp</label>
        <link refid="d8/dce/_log_8hpp_source"/>
        <childnode refid="9448" relation="include">
        </childnode>
        <childnode refid="9516" relation="include">
        </childnode>
        <childnode refid="9479" relation="include">
        </childnode>
        <childnode refid="9487" relation="include">
        </childnode>
        <childnode refid="9458" relation="include">
        </childnode>
        <childnode refid="9483" relation="include">
        </childnode>
        <childnode refid="9459" relation="include">
        </childnode>
        <childnode refid="9463" relation="include">
        </childnode>
        <childnode refid="9485" relation="include">
        </childnode>
      </node>
      <node id="9519">
        <label>random</label>
      </node>
      <node id="9496">
        <label>scene/Actor.hpp</label>
        <link refid="d2/d39/_actor_8hpp_source"/>
        <childnode refid="9450" relation="include">
        </childnode>
        <childnode refid="9452" relation="include">
        </childnode>
        <childnode refid="9497" relation="include">
        </childnode>
        <childnode refid="9472" relation="include">
        </childnode>
        <childnode refid="9481" relation="include">
        </childnode>
        <childnode refid="9454" relation="include">
        </childnode>
        <childnode refid="9479" relation="include">
        </childnode>
        <childnode refid="9487" relation="include">
        </childnode>
        <childnode refid="9459" relation="include">
        </childnode>
        <childnode refid="9463" relation="include">
        </childnode>
      </node>
      <node id="9484">
        <label>math/Plane.hpp</label>
        <link refid="d1/df4/_plane_8hpp_source"/>
      </node>
      <node id="9477">
        <label>condition_variable</label>
      </node>
      <node id="9497">
        <label>scene/ActorContainer.hpp</label>
        <link refid="d6/dbe/_actor_container_8hpp_source"/>
        <childnode refid="9450" relation="include">
        </childnode>
        <childnode refid="9452" relation="include">
        </childnode>
        <childnode refid="9453" relation="include">
        </childnode>
        <childnode refid="9459" relation="include">
        </childnode>
      </node>
      <node id="9499">
        <label>events/EventHandler.hpp</label>
        <link refid="d4/d86/_event_handler_8hpp_source"/>
        <childnode refid="9466" relation="include">
        </childnode>
        <childnode refid="9447" relation="include">
        </childnode>
        <childnode refid="9490" relation="include">
        </childnode>
      </node>
      <node id="9506">
        <label>graphics/Buffer.hpp</label>
        <link refid="dd/df1/_buffer_8hpp_source"/>
        <childnode refid="9447" relation="include">
        </childnode>
        <childnode refid="9452" relation="include">
        </childnode>
        <childnode refid="9453" relation="include">
        </childnode>
      </node>
      <node id="9456">
        <label>graphics/Texture.hpp</label>
        <link refid="d2/d4b/_texture_8hpp_source"/>
        <childnode refid="9447" relation="include">
        </childnode>
        <childnode refid="9448" relation="include">
        </childnode>
        <childnode refid="9452" relation="include">
        </childnode>
        <childnode refid="9453" relation="include">
        </childnode>
        <childnode refid="9457" relation="include">
        </childnode>
        <childnode refid="9454" relation="include">
        </childnode>
        <childnode refid="9458" relation="include">
        </childnode>
      </node>
      <node id="9470">
        <label>Setup.h</label>
        <link refid="de/d93/_setup_8h_source"/>
        <childnode refid="9471" relation="include">
        </childnode>
      </node>
      <node id="9505">
        <label>graphics/BlendState.hpp</label>
        <link refid="d2/d0f/_blend_state_8hpp_source"/>
        <childnode refid="9447" relation="include">
        </childnode>
        <childnode refid="9453" relation="include">
        </childnode>
      </node>
      <node id="9452">
        <label>vector</label>
      </node>
      <node id="9458">
        <label>math/Size2.hpp</label>
        <link refid="db/d59/_size2_8hpp_source"/>
        <childnode refid="9459" relation="include">
        </childnode>
      </node>
      <node id="9480">
        <label>math/ConvexVolume.hpp</label>
        <link refid="d8/d7f/_convex_volume_8hpp_source"/>
        <childnode refid="9452" relation="include">
        </childnode>
        <childnode refid="9481" relation="include">
        </childnode>
        <childnode refid="9484" relation="include">
        </childnode>
        <childnode refid="9485" relation="include">
        </childnode>
      </node>
      <node id="9445">
        <label>TTFont.hpp</label>
        <link refid="db/d7c/_t_t_font_8hpp_source"/>
        <childnode refid="9446" relation="include">
        </childnode>
      </node>
      <node id="9514">
        <label>utils/INI.hpp</label>
        <link refid="dc/d52/_i_n_i_8hpp_source"/>
        <childnode refid="9447" relation="include">
        </childnode>
        <childnode refid="9449" relation="include">
        </childnode>
        <childnode refid="9448" relation="include">
        </childnode>
        <childnode refid="9452" relation="include">
        </childnode>
      </node>
      <node id="9483">
        <label>math/Size3.hpp</label>
        <link refid="de/da6/_size3_8hpp_source"/>
        <childnode refid="9463" relation="include">
        </childnode>
      </node>
      <node id="9520">
        <label>sstream</label>
      </node>
      <node id="9498">
        <label>input/Input.hpp</label>
        <link refid="d0/d4b/_input_8hpp_source"/>
        <childnode refid="9450" relation="include">
        </childnode>
        <childnode refid="9476" relation="include">
        </childnode>
        <childnode refid="9452" relation="include">
        </childnode>
        <childnode refid="9451" relation="include">
        </childnode>
        <childnode refid="9453" relation="include">
        </childnode>
        <childnode refid="9459" relation="include">
        </childnode>
      </node>
      <node id="9461">
        <label>graphics/Vertex.hpp</label>
        <link refid="df/da9/_vertex_8hpp_source"/>
        <childnode refid="9448" relation="include">
        </childnode>
        <childnode refid="9452" relation="include">
        </childnode>
        <childnode refid="9462" relation="include">
        </childnode>
        <childnode refid="9459" relation="include">
        </childnode>
        <childnode refid="9463" relation="include">
        </childnode>
        <childnode refid="9454" relation="include">
        </childnode>
      </node>
      <node id="9486">
        <label>audio/Audio.hpp</label>
        <link refid="d4/d43/_audio_8hpp_source"/>
        <childnode refid="9447" relation="include">
        </childnode>
        <childnode refid="9466" relation="include">
        </childnode>
        <childnode refid="9450" relation="include">
        </childnode>
        <childnode refid="9465" relation="include">
        </childnode>
        <childnode refid="9452" relation="include">
        </childnode>
        <childnode refid="9453" relation="include">
        </childnode>
        <childnode refid="9487" relation="include">
        </childnode>
        <childnode refid="9463" relation="include">
        </childnode>
      </node>
      <node id="9454">
        <label>math/Color.hpp</label>
        <link refid="d3/d06/_color_8hpp_source"/>
        <childnode refid="9455" relation="include">
        </childnode>
        <childnode refid="9447" relation="include">
        </childnode>
        <childnode refid="9448" relation="include">
        </childnode>
      </node>
      <node id="9517">
        <label>utils/Utils.hpp</label>
        <link refid="d7/d6d/_utils_8hpp_source"/>
        <childnode refid="9448" relation="include">
        </childnode>
        <childnode refid="9452" relation="include">
        </childnode>
        <childnode refid="9447" relation="include">
        </childnode>
        <childnode refid="9518" relation="include">
        </childnode>
        <childnode refid="9482" relation="include">
        </childnode>
        <childnode refid="9466" relation="include">
        </childnode>
        <childnode refid="9519" relation="include">
        </childnode>
        <childnode refid="9520" relation="include">
        </childnode>
        <childnode refid="9470" relation="include">
        </childnode>
      </node>
      <node id="9510">
        <label>audio/SoundData.hpp</label>
        <link refid="df/d3b/_sound_data_8hpp_source"/>
        <childnode refid="9447" relation="include">
        </childnode>
        <childnode refid="9450" relation="include">
        </childnode>
        <childnode refid="9448" relation="include">
        </childnode>
        <childnode refid="9452" relation="include">
        </childnode>
        <childnode refid="9453" relation="include">
        </childnode>
      </node>
      <node id="9518">
        <label>cstdlib</label>
      </node>
      <node id="9474">
        <label>graphics/Renderer.hpp</label>
        <link refid="dc/d94/_renderer_8hpp_source"/>
        <childnode refid="9447" relation="include">
        </childnode>
        <childnode refid="9452" relation="include">
        </childnode>
        <childnode refid="9448" relation="include">
        </childnode>
        <childnode refid="9475" relation="include">
        </childnode>
        <childnode refid="9465" relation="include">
        </childnode>
        <childnode refid="9450" relation="include">
        </childnode>
        <childnode refid="9476" relation="include">
        </childnode>
        <childnode refid="9468" relation="include">
        </childnode>
        <childnode refid="9477" relation="include">
        </childnode>
        <childnode refid="9453" relation="include">
        </childnode>
        <childnode refid="9478" relation="include">
        </childnode>
        <childnode refid="9479" relation="include">
        </childnode>
        <childnode refid="9458" relation="include">
        </childnode>
        <childnode refid="9454" relation="include">
        </childnode>
        <childnode refid="9456" relation="include">
        </childnode>
      </node>
      <node id="9455">
        <label>cstddef</label>
      </node>
      <node id="9451">
        <label>unordered_map</label>
      </node>
      <node id="9507">
        <label>graphics/MeshBuffer.hpp</label>
        <link refid="d6/d47/_mesh_buffer_8hpp_source"/>
        <childnode refid="9450" relation="include">
        </childnode>
        <childnode refid="9452" relation="include">
        </childnode>
        <childnode refid="9453" relation="include">
        </childnode>
        <childnode refid="9461" relation="include">
        </childnode>
      </node>
      <node id="9485">
        <label>math/Vector4.hpp</label>
        <link refid="dd/d49/_vector4_8hpp_source"/>
        <childnode refid="9455" relation="include">
        </childnode>
        <childnode refid="9470" relation="include">
        </childnode>
      </node>
      <node id="9476">
        <label>mutex</label>
      </node>
      <node id="9469">
        <label>chrono</label>
      </node>
      <node id="9467">
        <label>thread</label>
      </node>
      <node id="9465">
        <label>set</label>
      </node>
      <node id="9459">
        <label>math/Vector2.hpp</label>
        <link refid="d3/d12/_vector2_8hpp_source"/>
        <childnode refid="9455" relation="include">
        </childnode>
        <childnode refid="9460" relation="include">
        </childnode>
      </node>
      <node id="9446">
        <label>gui/Font.hpp</label>
        <link refid="d9/da6/_font_8hpp_source"/>
        <childnode refid="9447" relation="include">
        </childnode>
        <childnode refid="9448" relation="include">
        </childnode>
        <childnode refid="9449" relation="include">
        </childnode>
        <childnode refid="9450" relation="include">
        </childnode>
        <childnode refid="9451" relation="include">
        </childnode>
        <childnode refid="9452" relation="include">
        </childnode>
        <childnode refid="9453" relation="include">
        </childnode>
        <childnode refid="9454" relation="include">
        </childnode>
        <childnode refid="9456" relation="include">
        </childnode>
        <childnode refid="9461" relation="include">
        </childnode>
      </node>
      <node id="9472">
        <label>core/UpdateCallback.hpp</label>
        <link refid="d0/d75/_update_callback_8hpp_source"/>
        <childnode refid="9466" relation="include">
        </childnode>
        <childnode refid="9447" relation="include">
        </childnode>
      </node>
      <node id="9509">
        <label>graphics/Shader.hpp</label>
        <link refid="d2/d73/_shader_8hpp_source"/>
        <childnode refid="9447" relation="include">
        </childnode>
        <childnode refid="9448" relation="include">
        </childnode>
        <childnode refid="9452" relation="include">
        </childnode>
        <childnode refid="9453" relation="include">
        </childnode>
        <childnode refid="9462" relation="include">
        </childnode>
        <childnode refid="9461" relation="include">
        </childnode>
      </node>
      <node id="9453">
        <label>utils/Noncopyable.hpp</label>
        <link refid="db/df1/_noncopyable_8hpp_source"/>
      </node>
      <node id="9478">
        <label>math/Rectangle.hpp</label>
        <link refid="d4/d32/_rectangle_8hpp_source"/>
        <childnode refid="9459" relation="include">
        </childnode>
        <childnode refid="9458" relation="include">
        </childnode>
      </node>
      <node id="9463">
        <label>math/Vector3.hpp</label>
        <link refid="d2/d6a/_vector3_8hpp_source"/>
        <childnode refid="9455" relation="include">
        </childnode>
      </node>
      <node id="9450">
        <label>memory</label>
      </node>
      <node id="9501">
        <label>core/Cache.hpp</label>
        <link refid="d6/d4c/_cache_8hpp_source"/>
        <childnode refid="9450" relation="include">
        </childnode>
        <childnode refid="9448" relation="include">
        </childnode>
        <childnode refid="9449" relation="include">
        </childnode>
        <childnode refid="9453" relation="include">
        </childnode>
        <childnode refid="9502" relation="include">
        </childnode>
        <childnode refid="9508" relation="include">
        </childnode>
        <childnode refid="9446" relation="include">
        </childnode>
        <childnode refid="9505" relation="include">
        </childnode>
        <childnode refid="9509" relation="include">
        </childnode>
        <childnode refid="9456" relation="include">
        </childnode>
        <childnode refid="9510" relation="include">
        </childnode>
      </node>
      <node id="9512">
        <label>network/Network.hpp</label>
        <link refid="dc/dd6/_network_8hpp_source"/>
        <childnode refid="9513" relation="include">
        </childnode>
        <childnode refid="9447" relation="include">
        </childnode>
        <childnode refid="9448" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="d6/d09/namespaceouzel">ouzel</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="d6/def/_t_t_font_8cpp_1afaa2f2d0d9d6726cfae6da070e736347" prot="public" static="no">
        <name>STB_TRUETYPE_IMPLEMENTATION</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ouzel/gui/TTFont.cpp" line="11" column="13" bodyfile="ouzel/gui/TTFont.cpp" bodystart="11" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2017<sp/>Elviss<sp/>Strazdins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>Ouzel<sp/>engine.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TTFont.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;core/Engine.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;files/FileSystem.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;utils/Log.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;utils/Utils.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_TRUETYPE_IMPLEMENTATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../../external/stb/stb_truetype.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="d6/d09/namespaceouzel" kindref="compound">ouzel</ref></highlight></codeline>
<codeline lineno="15"><highlight class="normal">{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>TTFont::TTFont():</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Font()</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>TTFont::TTFont(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>filename,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>fontSize,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>mipmaps,<sp/>UTFChars<sp/>flag)</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!parseFont(filename,<sp/>fontSize,<sp/>mipmaps,<sp/>flag))</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Log(Log::Level::ERR)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>parse<sp/>font<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>filename;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kernCount<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(kern.size());</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TTFont::getVertices(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>text,</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Color&amp;<sp/>color,</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector2&amp;<sp/>anchor,</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector2&amp;<sp/>scale,</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;uint16_t&gt;&amp;<sp/>indices,</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;graphics::VertexPCT&gt;&amp;<sp/>vertices,</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;graphics::Texture&gt;&amp;<sp/>texture)</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector2<sp/>position;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;uint32_t&gt;<sp/>utf32Text<sp/>=<sp/>utf8to32(text);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indices.clear();</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertices.clear();</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indices.reserve(utf32Text.size()<sp/>*<sp/>6);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertices.reserve(utf32Text.size()<sp/>*<sp/>4);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector2<sp/>textCoords[4];</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>firstChar<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>utf32Text.begin();<sp/>i<sp/>!=<sp/>utf32Text.end();<sp/>++i)</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unordered_map&lt;uint32_t,<sp/>CharDescriptor&gt;::iterator<sp/>iter<sp/>=<sp/>chars.find(*i);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iter<sp/>!=<sp/>chars.end())</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CharDescriptor&amp;<sp/>f<sp/>=<sp/>iter-&gt;second;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>startIndex<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(vertices.size());</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indices.push_back(startIndex<sp/>+<sp/>0);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indices.push_back(startIndex<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indices.push_back(startIndex<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indices.push_back(startIndex<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indices.push_back(startIndex<sp/>+<sp/>3);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indices.push_back(startIndex<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector2<sp/>leftTop(f.x<sp/>/<sp/>static_cast&lt;float&gt;(width),</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f.y<sp/>/<sp/>static_cast&lt;float&gt;(height));</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector2<sp/>rightBottom((f.x<sp/>+<sp/>f.width)<sp/>/<sp/>static_cast&lt;float&gt;(width),</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(f.y<sp/>+<sp/>f.height)<sp/>/<sp/>static_cast&lt;float&gt;(height));</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>textCoords[0]<sp/>=<sp/>Vector2(leftTop.x,<sp/>rightBottom.y);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>textCoords[1]<sp/>=<sp/>Vector2(rightBottom.x,<sp/>rightBottom.y);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>textCoords[2]<sp/>=<sp/>Vector2(leftTop.x,<sp/>leftTop.y);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>textCoords[3]<sp/>=<sp/>Vector2(rightBottom.x,<sp/>leftTop.y);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertices.push_back(graphics::VertexPCT(Vector3(position.x<sp/>+<sp/>f.xOffset,<sp/>-position.y<sp/>-<sp/>f.yOffset<sp/>-<sp/>f.height,<sp/>0.0f),</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color,<sp/>textCoords[0]));</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertices.push_back(graphics::VertexPCT(Vector3(position.x<sp/>+<sp/>f.xOffset<sp/>+<sp/>f.width,<sp/>-position.y<sp/>-<sp/>f.yOffset<sp/>-<sp/>f.height,<sp/>0.0f),</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color,<sp/>textCoords[1]));</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertices.push_back(graphics::VertexPCT(Vector3(position.x<sp/>+<sp/>f.xOffset,<sp/>-position.y<sp/>-<sp/>f.yOffset,<sp/>0.0f),</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color,<sp/>textCoords[2]));</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertices.push_back(graphics::VertexPCT(Vector3(position.x<sp/>+<sp/>f.xOffset<sp/>+<sp/>f.width,<sp/>-position.y<sp/>-<sp/>f.yOffset,<sp/>0.0f),</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color,<sp/>textCoords[3]));</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((i<sp/>+<sp/>1)<sp/>!=<sp/>utf32Text.end())</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>position.x<sp/>+=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(getKerningPair(*i,<sp/>*(i<sp/>+<sp/>1)));</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>position.x<sp/>+=<sp/>f.xAdvance;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*i<sp/>==<sp/>static_cast&lt;uint32_t&gt;(</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)<sp/>||<sp/></highlight><highlight class="comment">//<sp/>line<sp/>feed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(i<sp/>+<sp/>1)<sp/>==<sp/>utf32Text.end())<sp/></highlight><highlight class="comment">//<sp/>end<sp/>of<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>lineWidth<sp/>=<sp/>position.x;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>position.x<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>position.y<sp/>+=<sp/>lineHeight;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>firstChar;<sp/>c<sp/>&lt;<sp/>vertices.size();<sp/>++c)</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertices[c].position.x<sp/>-=<sp/>lineWidth<sp/>*<sp/>anchor.x;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>firstChar<sp/>=<sp/>vertices.size();</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>textHeight<sp/>=<sp/>position.y;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>vertices.size();<sp/>++c)</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertices[c].position.y<sp/>+=<sp/>textHeight<sp/>*<sp/>(1.0f<sp/>-<sp/>anchor.y);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertices[c].position.x<sp/>*=<sp/>scale.x;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertices[c].position.y<sp/>*=<sp/>scale.y;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>texture<sp/>=<sp/>fontTexture;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>int16_t<sp/>TTFont::getKerningPair(uint32_t<sp/>first,<sp/>uint32_t<sp/>second)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>kern.find(std::make_pair(first,<sp/>second));</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>kern.end())</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i-&gt;second;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>TTFont::getStringWidth(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>text)</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>total<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;uint32_t&gt;<sp/>utf32Text<sp/>=<sp/>utf8to32(text);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>utf32Text.begin();<sp/>i<sp/>!=<sp/>utf32Text.end();<sp/>++i)</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unordered_map&lt;uint32_t,<sp/>CharDescriptor&gt;::iterator<sp/>iter<sp/>=<sp/>chars.find(*i);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iter<sp/>!=<sp/>chars.end())</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CharDescriptor&amp;<sp/>f<sp/>=<sp/>iter-&gt;second;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total<sp/>+=<sp/>f.xAdvance;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>total;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TTFont::parseFont(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>filename,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>fontSize,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>mipmaps,<sp/>UTFChars<sp/>flag)</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbtt_fontinfo<sp/>font;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;unsigned<sp/>char&gt;<sp/>data;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>f<sp/>=<sp/>ouzel::sharedEngine-&gt;getFileSystem()-&gt;getPath(filename);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ouzel::sharedEngine-&gt;getFileSystem()-&gt;readFile(f,<sp/>data))</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stbtt_InitFont(&amp;font,<sp/>data.data(),<sp/>stbtt_GetFontOffsetForIndex(data.data(),<sp/>0)))</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Log(Log::Level::ERR)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>load<sp/>font&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>stbtt_ScaleForPixelHeight(&amp;font,<sp/>fontSize);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/>h,<sp/>xoff,<sp/>yoff;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>height<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;uint16_t&gt;<sp/>glyphs;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;uint32_t,<sp/>std::pair&lt;Size2,<sp/>std::vector&lt;uint8_t&gt;&gt;&gt;<sp/>glyphToBitmapData;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flag<sp/>&amp;&amp;<sp/>UTFChars::ASCII)</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint16_t<sp/>i<sp/>=<sp/>32;<sp/>i<sp/>&lt;<sp/>127;<sp/>i++)</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glyphs.push_back(i);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flag<sp/>&amp;&amp;<sp/>UTFChars::ASCIIPLUS)</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint16_t<sp/>i<sp/>=<sp/>128;<sp/>i<sp/>&lt;<sp/>256;<sp/>i++)</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glyphs.push_back(i);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint16_t<sp/>c<sp/>:<sp/>glyphs)</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>bitmap<sp/>=<sp/>stbtt_GetCodepointBitmap(&amp;font,<sp/>s,<sp/>s,<sp/>c,<sp/>&amp;w,<sp/>&amp;h,<sp/>&amp;xoff,<sp/>&amp;yoff);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bitmap)</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint16_t<sp/>j<sp/>:<sp/>glyphs)</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kx<sp/>=<sp/>stbtt_GetCodepointKernAdvance(&amp;font,<sp/>j,<sp/>c);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kx<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kern.emplace(std::pair&lt;uint32_t,<sp/>uint32_t&gt;(j,<sp/>c),<sp/>static_cast&lt;int16_t&gt;(kx<sp/>*<sp/>s));</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>advance,<sp/>leftBearing;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbtt_GetCodepointHMetrics(&amp;font,<sp/>c,<sp/>&amp;advance,<sp/>&amp;leftBearing);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharDescriptor<sp/>nd;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nd.xAdvance<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(advance<sp/>*<sp/>s);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nd.height<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(h);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nd.width<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(w);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nd.xOffset<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(leftBearing<sp/>*<sp/>s);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nd.yOffset<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(h<sp/>-<sp/>abs(yoff));</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;uint8_t&gt;<sp/>currentBuffer(static_cast&lt;size_t&gt;(h<sp/>*<sp/>w));</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::copy(&amp;bitmap[0],<sp/>&amp;bitmap[h<sp/>*<sp/>w],<sp/>currentBuffer.begin());</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glyphToBitmapData.emplace(c,<sp/>std::make_pair(Size2(static_cast&lt;float&gt;(w),<sp/>static_cast&lt;float&gt;(h)),<sp/>currentBuffer));</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chars.emplace(c,<sp/>nd);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>height<sp/>=<sp/>height<sp/>&lt;<sp/>static_cast&lt;uint16_t&gt;(h)<sp/>?<sp/>static_cast&lt;uint16_t&gt;(h)<sp/>:<sp/>height;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width<sp/>+=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(w);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::vector&lt;uint8_t&gt;&gt;<sp/>scanlines(height);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;c<sp/>:<sp/>glyphToBitmapData)</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>charHeight<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(c.second.first.height);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>charWidth<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(c.second.first.width);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chars.at(c.first).x<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(x);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chars.at(c.first).y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>+=<sp/>charWidth;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>extraRows<sp/>=<sp/>height<sp/>-<sp/>charHeight;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chars.at(c.first).yOffset<sp/>+=<sp/>extraRows;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>extraSpaceSize<sp/>=<sp/>extraRows<sp/>*<sp/>charWidth;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>charSize<sp/>=<sp/>charHeight<sp/>*<sp/>charWidth;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;uint8_t&gt;<sp/>newCharBuffer(extraSpaceSize<sp/>+<sp/>charSize,<sp/>0x00);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::copy(c.second.second.begin(),<sp/>c.second.second.begin()<sp/>+<sp/>charSize,<sp/>newCharBuffer.data());</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(newCharBuffer.size()<sp/>==<sp/>height<sp/>*<sp/>charWidth);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint16_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>height;<sp/>i++)</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>scanlinesPreSize<sp/>=<sp/>scanlines[i].size();</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scanlines[i].resize(scanlinesPreSize<sp/>+<sp/>charWidth);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t*<sp/>bufferStart<sp/>=<sp/>newCharBuffer.data()<sp/>+<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(charWidth<sp/>*<sp/>i);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::copy(bufferStart,<sp/>bufferStart<sp/>+<sp/>charWidth,<sp/>scanlines[i].data()<sp/>+<sp/>scanlinesPreSize);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;uint8_t&gt;<sp/>textureData(scanlines[0].size()<sp/>*<sp/>height<sp/>*<sp/>4);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint16_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>height;<sp/>i++)</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>scanlines[0].size();<sp/>j++)</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>b<sp/>=<sp/>scanlines[i][j];</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>textureData[(i<sp/>*<sp/>scanlines[0].size()<sp/>+<sp/>j)<sp/>*<sp/>4<sp/>+<sp/>0]<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>textureData[(i<sp/>*<sp/>scanlines[0].size()<sp/>+<sp/>j)<sp/>*<sp/>4<sp/>+<sp/>1]<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>textureData[(i<sp/>*<sp/>scanlines[0].size()<sp/>+<sp/>j)<sp/>*<sp/>4<sp/>+<sp/>2]<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>textureData[(i<sp/>*<sp/>scanlines[0].size()<sp/>+<sp/>j)<sp/>*<sp/>4<sp/>+<sp/>3]<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fontTexture<sp/>=<sp/>std::make_shared&lt;graphics::Texture&gt;();</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fontTexture-&gt;init(textureData,<sp/>Size2(width,<sp/>height),<sp/>0,<sp/>mipmaps<sp/>?<sp/>0<sp/>:<sp/>1);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pages<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lineHeight<sp/>=<sp/>fontSize;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kernCount<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(kern.size());</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="ouzel/gui/TTFont.cpp"/>
  </compounddef>
</doxygen>
